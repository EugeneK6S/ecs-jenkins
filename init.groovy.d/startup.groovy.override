import com.amazonaws.ClientConfiguration
import com.amazonaws.regions.RegionUtils
import com.amazonaws.services.ecs.AmazonECSClient
import com.amazonaws.util.EC2MetadataUtils
import com.amazonaws.services.elasticloadbalancing.*
import com.amazonaws.services.elasticloadbalancing.model.*
import com.cloudbees.jenkins.plugins.amazonecs.ECSCloud
import com.cloudbees.jenkins.plugins.amazonecs.ECSTaskTemplate
import com.cloudbees.jenkins.plugins.amazonecs.ECSTaskTemplate.MountPointEntry
import hudson.model.*
import hudson.plugins.gradle.*
import hudson.tools.*
import hudson.security.*
import hudson.security.csrf.DefaultCrumbIssuer
import jenkins.model.*
import jenkins.model.Jenkins
import jenkins.model.JenkinsLocationConfiguration
import java.util.logging.Logger
import javaposse.jobdsl.plugin.GlobalJobDslSecurityConfiguration
import jenkins.model.GlobalConfiguration


Logger.global.info("[Running] startup script")

configureJenkinsURL()
configureSecurity()
configureCloud()

Jenkins.instance.save()

buildJob('seed')

Logger.global.info("[Finished] startup script")

private configureJenkinsURL() {
    String jenkinsURL = "http://" + System.getenv('JENKINS_HOSTNAME') + "/"
    Logger.global.info("Set Jenkins URL to $jenkinsURL")
    def config = JenkinsLocationConfiguration.get()
    config.url = jenkinsURL
    config.save()
}

private void configureSecurity() {
    // If you're too brave -> Jenkins.instance.disableSecurity()
    HudsonPrivateSecurityRealm securityRealm = new HudsonPrivateSecurityRealm(false)

    // Creating admin user
    final String userName = System.getenv('JENKINS_ADMINISTRATOR_USERNAME')
    final String password = System.getenv('JENKINS_ADMINISTRATOR_PASSWORD')
    securityRealm.createAccount(userName, password)
    
    // disable Job DSL script approval, we want to run seed job without any approvals
    GlobalConfiguration.all().get(GlobalJobDslSecurityConfiguration.class).useScriptSecurity=false
    GlobalConfiguration.all().get(GlobalJobDslSecurityConfiguration.class).save()

    // This can be used to have admin / non-admin groups separation
    // def strategy = new GlobalMatrixAuthorizationStrategy()
    // strategy.add(jenkinsInstance.ADMINISTER, "admin")
    // instance.setAuthorizationStrategy(strategy)

    // Granting full control to all logged-in users
    def strategy = new FullControlOnceLoggedInAuthorizationStrategy()
    strategy.setAllowAnonymousRead(false)
    Jenkins.instance.setAuthorizationStrategy(strategy)

    // Tweaks to set a default Crumb and disable remoting
    Jenkins.instance.setSecurityRealm((SecurityRealm) securityRealm)
    Jenkins.instance.getDescriptor("jenkins.CLI").get().setEnabled(false)
    Jenkins.instance.setCrumbIssuer(new DefaultCrumbIssuer(true))

    //this port is fixed so it can be configured in the security group
    Jenkins.instance.setSlaveAgentPort(50000)
}

private def buildJob(String jobName, def params = null) {
    Logger.global.info("Building job '$jobName")
    def job = Jenkins.instance.getJob(jobName)
    Jenkins.instance.queue.schedule(job, 0, new CauseAction(new Cause() {
        @Override
        String getShortDescription() {
            'Jenkins startup script'
        }
    }), params)
}

private getClientConfiguration() {
    new ClientConfiguration()
}

private String queryJenkinsClusterArn(String regionName) {
    AmazonECSClient client = new AmazonECSClient(clientConfiguration)
    client.setRegion(RegionUtils.getRegion(regionName))
    client.listClusters().getClusterArns().find { it.matches(System.getenv('ENV_NAME')) }
}

private void configureCloud() {
    try {
        Logger.global.info("Creating ECS Template")
        def ecsTemplates = templates = Arrays.asList(
                createECSTaskTemplate('jenkins-ecs-slave', '460520929798.dkr.ecr.us-west-1.amazonaws.com/jenkinsci-slave', 4096, 2048),
        )
        String clusterArn = queryJenkinsClusterArn(System.getenv('ECS_CLUSTER_REGION'))

        Logger.global.info("Creating ECS Cloud for $clusterArn")
        def ecsCloud = new ECSCloud(
                name = "jenkins_cluster",
                credentialsId = '',
                cluster = System.getenv('ECS_CLUSTER_ARN')
        )
        ecsCloud.setJenkinsUrl("http://" + System.getenv('JENKINS_HOSTNAME') + "/")
        ecsCloud.setRegionName(System.getenv('ECS_CLUSTER_REGION'))
        ecsCloud.setSlaveTimeoutInSeconds(60)
        ecsCloud.setTemplates(ecsTemplates)
        ecsCloud.setTunnel(System.getenv('ECS_JNLP_LB') + ":50000")

        Jenkins.instance.clouds.clear()
        Jenkins.instance.clouds.add(ecsCloud)
    } catch (com.amazonaws.SdkClientException e) {
        Logger.global.severe({ e.message })
        Logger.global.severe("ERROR: Could not create ECS config, are you running this container in AWS?")
    }
}

//cloudbees/jnlp-slave-with-java-build-tools
private ECSTaskTemplate createECSTaskTemplate(String label, String image, int softMemory, int cpu) {
    Logger.global.info("Creating ECS Template '$label' for image '$image' (memory: softMemory, cpu: $cpu)")
    
    // Docker-in-Docker for slaves
    def mounts = Arrays.asList(
        new MountPointEntry(
            name="docker",
            sourcePath="/var/run/docker.sock",
            containerPath="/var/run/docker.sock",
            readOnly=false),
    )

    // setting up CloudWatch logs for slaves
    List<ECSTaskTemplate.LogDriverOption> logDriverOptions = new ArrayList<ECSTaskTemplate.LogDriverOption>()
    logDriverOptions.add(new ECSTaskTemplate.LogDriverOption('awslogs-group', System.getenv('SLAVE_LOG_GROUP')))
    logDriverOptions.add(new ECSTaskTemplate.LogDriverOption('awslogs-region', System.getenv('ECS_CLUSTER_REGION')))

    new ECSTaskTemplate(
            templateName = label,
            // label used by jobs
            label = label,
            taskDefinitionOverride = null,
            // docker image of a slave
            image = image,
            repositoryCredentials = null,
            launchType = "EC2",
            networkMode = "bridge",
            remoteFSRoot = "/home/jenkins",
            //hard memory limit
            memory = 0,
            //soft memory limit
            memoryReservation = softMemory,
            cpu = cpu,
            subnets = null,
            securityGroups = null,
            assignPublicIp = false,
            privileged = false,
            containerUser = null,
            // using awslogs (CloudWatch)
            logDriverOptions = logDriverOptions,
            environments = null,
            extraHosts = null,
            // mounting Docker socket
            mountPoints = mounts,
            portMappings = null
    )
}